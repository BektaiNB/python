def task1():
    m = int(input("Enter a positive integer: "))
    i = 1
    while i <= m:
        print(i)
        i += 2

def task2():
    m = int(input("Enter a positive integer: "))
    factorial = 1
    while m > 0:
        factorial *= m
        m -= 1
    print("Factorial:", factorial)

def task3():
    while True:
        number = int(input("Введите число: "))  # Получить ввод числа от пользователя в виде целого числа

        if number == 42:  # Проверить, равно ли введенное число 42
            print("Найдено число 42! Программа завершается.")  # Вывести сообщение
            break  # Завершить выполнение цикла

def task4():
    # Запрос строки от пользователя
    string = input("Введите строку: ")

    # Подсчет количества символов 'a' в строке
    count = string.count("a")

    # Вывод результата подсчета
    print("Количество символов 'a':", count)

def task5():
    # Запрос числа от пользователя
    number = input("Введите число: ")
    # Вычисление суммы цифр в числе
    # Мы преобразуем каждую цифру в числе в целое число и затем суммируем их
    digit_sum = sum(int(digit) for digit in number)
    # Вывод результата суммы цифр
    print("Сумма цифр:", digit_sum)

def task6():
    # Запрос положительного целого числа от пользователя
    N = int(input("Введите положительное целое число: "))
    a, b = 0, 1  # Инициализация начальных значений последовательности Фибоначчи
    while N > 0:
        print(a)  # Вывод текущего значения a
        # Обновление a и b согласно последовательности Фибоначчи
        a, b = b, a + b
        N -= 1  # Уменьшение счетчика

def task7():
    # Запрос строки у пользователя
    string = input("Пожалуйста, введите строку: ")

    # Создание обратной строки путем извлечения символов в обратном порядке
    reverse_string = string[::-1]

    # Вывод обратной строки
    print("Обратная строка:", reverse_string)

def task8():
    # Инициализация переменной для хранения суммы нечетных чисел
    sum_odd = 0
    # Бесконечный цикл
    while True:
        number = int(input("Введите число: "))  # Получить число от пользователя
    # Проверка на четность числа
        if number % 2 == 0:
          continue  # Если число четное, перейти к следующей итерации цикла
    sum_odd += number  # Добавить нечетное число к сумме нечетных чисел
    print("Сумма нечетных чисел:", sum_odd)  # Вывод текущей суммы нечетных чисел

def task9():
    # Запрос строки у пользователя
    string = input("Введите строку: ")
    # Проверка, является ли строка палиндромом
    if string == string[::-1]:
        print("Палиндром")
    else:
        print("Не палиндром")
    # Запрос основания (X) и степени (Y) у пользователя
    X = int(input("Введите основание (X): "))
    Y = int(input("Введите степень (Y): "))
    result = 1
    # Возводим X в степень Y и сохраняем результат
    while Y > 0:
        result *= X
        Y -= 1
    # Вывод результата возведения в степень
    print(f"{X} в степени {Y} равно {result}")

def task10():
    # Запрос у пользователя положительного целого числа (N)
    N = int(input("Введите положительное целое число (N): "))
    num = 2
    # Начало цикла, который ищет простые числа в диапазоне от 2 до N
    while num <= N:
        is_prime = True
        # Перебор делителей числа num
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                is_prime = False
                break
        # Если is_prime осталось True, то num - простое число
        if is_prime:
            print(num, end=' ')
        num += 1
    # Запрос числа у пользователя
    number = input("Введите число: ")
    # Создание обратной версии числа, переставляя его цифры
    reverse_number = number[::-1]
    # Вывод обратной версии числа
    print("Обратное число:", reverse_number)

def is_prime(num):
    # Функция для проверки, является ли число простым
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

    # Запрос числа у пользователя
    number = int(input("Введите число: "))

    while True:
        if is_prime(number):
            print(f"{number} - простое число.")
            break
        else:
            number += 1
        continue

#task12():
    # Функция для шифрования текста с использованием шифра Цезаря
    def caesar_cipher(text, shift):
        result = ""  # Инициализация результата
        for char in text:
            if char.isalpha():  # Проверка, является ли символ буквой
                is_upper = char.isupper()  # Проверка, является ли символ заглавной буквой
                char = chr(((ord(char) - ord('A' if is_upper else 'a') + shift) % 26) + ord('A' if is_upper else 'a'))
                # Шифрование символа и добавление его к результату
            result += char  # Добавление символа (зашифрованного или неизмененного) к результату
        return result

    # Запрос строки у пользователя
    text = input("Введите строку: ")

    # Запрос значения сдвига (N) у пользователя
    shift = int(input("Введите значение сдвига (N): "))

    # Вызов функции caesar_cipher для шифрования строки
    encrypted_text = caesar_cipher(text, shift)

    # Вывод зашифрованной строки
    print("Зашифрованная строка:", encrypted_text)

